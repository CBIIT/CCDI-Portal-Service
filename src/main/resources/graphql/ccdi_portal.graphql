type alt_participant {
  alt_participant_id: String
  source: String
  participants: [participant] @relation(name:"has_alt_participant", direction:OUT)
}

type file_set {
  file_set_id: String
  file_ordinal: String
  file_id: String
  file_name: String
  file_md5: String
  file_content_format: String
  file_deposit_location: String
  submitted_file: submitted_file @relation(name:"files_of_submitted_file", direction:OUT)
}

type participant {
  participant_id: String
  gender: String
  age_at_index: String
  submitted_files: [submitted_file] @relation(name:"has_participant", direction:OUT)
  alt_participants: [alt_participant] @relation(name:"has_alt_participant", direction:IN)
  samples: [sample] @relation(name:"sample_from_participant", direction:IN)
}

type sample {
  sample_id: String
  sample_type: String
  date_of_sample_collection: String
  participant: participant @relation(name:"sample_from_participant", direction:OUT)
}

type study {
  study_id: String
  pi_name: String
  pi_institution: String
  pi_email: String
  pi_era_id: String
  study_title: String
  study_phs_id: String
  is_published: Boolean
  doi: String
  submitted_2_repo: Boolean
  gdc: Boolean
  pdc: Boolean
  dbGap: Boolean
  sra: Boolean
  genbank: Boolean
  figshare: Boolean
  other_repo: String
  submitted_files: [submitted_file] @relation(name:"study_within_submitted_file", direction:OUT)
}

type submitted_file {
  submitted_file_id: String
  ccdi_arm: String
  submission_date: String
  submission_ts: String
  source_ip: String
  file_count_validate: Boolean
  filename_list_validate: Boolean
  study_registered: Boolean
  permitted_4_gru: Boolean
  data_identifying: Boolean
  species: String
  human_subjects: Boolean
  files_count: Int
  file_names: String
  file_name_suffixes: String
  is_free_text: Boolean
  is_tsv_csv: Boolean
  is_json: Boolean
  is_xml: Boolean
  is_other_non_binary: Boolean
  is_excel: Boolean
  is_dicom: Boolean
  is_svs: Boolean
  is_other_binary_image: Boolean
  is_other_binary_non_image: Boolean
  total_size_in_bytes: Int
  subject_demographics: Boolean
  subject_clinical_data: Boolean
  subject_treatment_response_data: Boolean
  subject_outcomes_data: Boolean
  subject_imaging_data_raw: Boolean
  subject_imaging_data_written_findings: Boolean
  subject_data_metadata: Boolean
  biospecimen_data: Boolean
  surgical_pathology_reports: Boolean
  histopathology_images_raw: Boolean
  primary_dna_sequence_data: Boolean
  germline_data: Boolean
  somatic_data: Boolean
  derived_germline_variants: Boolean
  derived_somatic_variants: Boolean
  primary_rnaseq_expression_data: Boolean
  scrna_sequencing: Boolean
  scchromatin_sequencing: Boolean
  proteogenomics_data: Boolean
  rppa_data: Boolean
  fish: Boolean
  imc: Boolean
  in_vitro_cell_proliferation_assay: Boolean
  in_vitro_small_molecule_sensitivity_assays: Boolean
  in_vitro_crispr_screens: Boolean
  in_vitro_shrna_orf_screens: Boolean
  other: Boolean
  other_specify: String
  primary_datatype: String
  derived_interventional_clinical_trial: Boolean
  derived_observational_study: Boolean
  have_subject_ids: Boolean
  have_pii: Boolean
  subject_id_cross_reference: Boolean
  contain_biospecimen_ids: Boolean
  contain_biospecimen_2_subject_mappings: Boolean
  participant_id_column_header_or_number: String
  alt_participant_id_column_header_or_number: String
  participants: [participant] @relation(name:"has_participant", direction:IN)
  submitters: [submitter] @relation(name:"submitted_by", direction:OUT)
  studies: [study] @relation(name:"study_within_submitted_file", direction:IN)
  file_sets: [file_set] @relation(name:"files_of_submitted_file", direction:IN)
}

type submitter {
  submitter_id: String
  submitter_name: String
  submitter_identifier: String
  submitter_email: String
  submitter_era_id: String
  institution_id: String
  institution_name: String
  program_id: String
  submitted_files: [submitted_file] @relation(name:"submitted_by", direction:IN)
}

type GroupCount {
    group: String
    subjects: Int
}

type ProgramInfo {
    program_id: String
    start_date: String
    end_date: String
    num_files: Int
    num_participants: Int
    num_studies: Int
}

type SubmitterInfo {
    submitter_id: String
    submitter_name: String
    submitter_identifier: String
    submitter_email: String
    submitter_era_id: String
    institution_id: String
    institution_name: String
    program_id: String
} 

type StudyInfo {
    study_id: String
    pi_name: String
    pi_institution: String
    pi_email: String
    pi_era_id: String
    study_title: String
    study_phs_id: String
    is_published: Boolean
    doi: String
    submitted_2_repo: Boolean
    gdc: Boolean
    pdc: Boolean
    dbGap: Boolean
    sra: Boolean
    genbank: Boolean
    figshare: Boolean
    other_repo: String
}

type Alt_Participant_Info {
    alt_participant_id: String
    source: String
}

type ParticipantInfo {
    participant_id: String
    gender: String
    age_at_index: String
    alt_participants:String
}

type File_Set_Info {
    file_set_id: String
    file_ordinal: Int
    file_id: String
    file_name: String
    file_md5: String
    file_content_format: String
    file_deposit_location: String
}

type SubmittedFileInfo {
    submitted_file_id: String
    ccdi_arm: String
    submission_date: String
    submission_ts: String
    file_count_validate: Boolean
    filename_list_validate: Boolean
    study_registered: Boolean
    primary_datatype: String
    derived_interventional_clinical_trial: Boolean
    derived_observational_study: Boolean
    have_subject_ids: Boolean
    have_pii: Boolean
    subject_id_cross_reference: Boolean
    contain_biospecimen_ids: Boolean
    contain_biospecimen_2_subject_mappings: Boolean
    participant_id_column_header_or_number: String
    alt_participant_id_column_header_or_number: String
}

type ProgramDetail {
    program_id: String
    start_date: String
    end_date: String
    num_files: Int
    num_participants: Int
    num_studies: Int
    files: [SubmittedFileInfo]
}

type SubmittedFileDetail {
    submitted_file_id: String
    submitter_id: String
    submitter_name: String
    ccdi_arm: String
    submission_date: String
    submission_ts: String
    source_ip: String
    file_count_validate: Boolean
    filename_list_validate: Boolean
    species: String
    human_subjects: Boolean
    total_size_in_bytes: Int
    primary_datatype: String
    have_subject_ids: Boolean
    have_pii: Boolean
    subject_id_cross_reference: Boolean
    contain_biospecimen_ids: Boolean
    contain_biospecimen_2_subject_mappings: Boolean
    participant_id_column_header_or_number: String
    alt_participant_id_column_header_or_number: String
    studies: [StudyInfo]
    participants: [ParticipantInfo]
    files: [File_Set_Info]
}

type SubmittedFileOverview {
    submitted_file_id: String
    ccdi_arm: String
    submission_date: String
    submission_ts: String
    source_ip: String
    file_count_validate: Boolean
    filename_list_validate: Boolean
    study_registered: Boolean
    primary_datatype: String
    derived_interventional_clinical_trial: Boolean
    derived_observational_study: Boolean
    have_subject_ids: Boolean
    have_pii: Boolean
    subject_id_cross_reference: Boolean
    contain_biospecimen_ids: Boolean
    contain_biospecimen_2_subject_mappings: Boolean
    participant_id_column_header_or_number: String
    alt_participant_id_column_header_or_number: String
    files: [file_set]
}

type ParticipantOverview {
    participant_id: String
    gender: String
    age_at_index: String
    alt_participants: [alt_participant]
}

type SearchResult {
    numberOfPrograms: Int
    numberOfStudies: Int
    numberOfSubmitters: Int
    numberOfParticipants: Int
    numberOfFiles: Int
    fileIds: [String]
    firstPage: [SubmittedFileOverview]
}

schema {
    query: QueryType
}

type QueryType {
    schemaVersion: String @cypher(statement: "RETURN '1.1.0'")

    "Simple counts"
    numberOfPrograms: Int @cypher(statement: "MATCH (n:submitter) return count(n)")
    numberOfSubmitters: Int @cypher(statement: "MATCH (n:submitter) return count(n)")
    numberOfStudies: Int @cypher(statement: "MATCH (n:study) return count(n)")
    numberOfParticipants: Int @cypher(statement: "MATCH (n:participant) return count(n)")
    numberOfFiles: Int @cypher(statement: "MATCH (n:submitted_file) return count(n)")

    programInfo: [ProgramInfo] @cypher(statement: """
        MATCH (sb:submitter)
        OPTIONAL MATCH (sb)<--(sf:submitted_file)
        OPTIONAL MATCH (sf)<--(s:study)
        OPTIONAL MATCH (sf)<--(p:participant)
        RETURN {
            program_id: sb.program_id,
            start_date: "2006-04-07",
            end_date: "2018-03-18",
            num_files: COUNT(DISTINCT sf),
            num_participants: COUNT(DISTINCT p),
            num_studies: COUNT(DISTINCT s)
        }
    """, passThrough: true)

    "Group counts"
    fileCountByProgram(submitted_file_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (s:submitter)
        OPTIONAL MATCH (s)<--(sf:submitted_file)
        WITH DISTINCT s, sf
            WHERE (size($submitted_file_ids) = 0 OR sf.submitted_file_id IN $submitted_file_ids)
        RETURN { group: s.program_id,
                 subjects: count(sf) }
    """, passThrough: true)
    fileCountByContentFormat(submitted_file_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (sf:submitted_file)
        OPTIONAL MATCH (sf)<--(fs:file_set)
        WITH DISTINCT sf, fs
            WHERE (size($submitted_file_ids) = 0 OR sf.submitted_file_id IN $submitted_file_ids)
        RETURN { group: fs.file_content_format,
                 subjects: COUNT(DISTINCT sf.submitted_file_id)}
    """, passThrough: true)

    fileOverViewPaged(submitted_file_ids: [String] = [""], order_by: String = ""): [SubmittedFileOverview] @cypher(statement: """
        MATCH (sf:submitted_file)
          WHERE ($submitted_file_ids IS NULL OR $submitted_file_ids = [""] OR sf.submitted_file_id IN $submitted_file_ids)
        OPTIONAL MATCH (sf)<--(fs:file_set)
        WITH
            collect(DISTINCT fs {.*}) AS files, sf
        RETURN {
            submitted_file_id: sf.submitted_file_id,
            ccdi_arm: sf.ccdi_arm,
            submission_date: sf.submission_date,
            submission_ts: sf.submission_ts,
            source_ip: sf.source_ip,
            file_count_validate: sf.file_count_validate,
            filename_list_validate: sf.filename_list_validate,
            study_registered: sf.study_registered,
            primary_datatype: sf.primary_datatype,
            derived_interventional_clinical_trial: sf.derived_interventional_clinical_trial,
            derived_observational_study: sf.derived_observational_study,
            have_subject_ids: sf.have_subject_ids,
            have_pii: sf.have_pii,
            subject_id_cross_reference: sf.subject_id_cross_reference,
            contain_biospecimen_ids: sf.contain_biospecimen_ids,
            contain_biospecimen_2_subject_mappings: sf.contain_biospecimen_2_subject_mappings,
            participant_id_column_header_or_number: sf.participant_id_column_header_or_number,
            alt_participant_id_column_header_or_number: sf.alt_participant_id_column_header_or_number,
            files: files
        }
        ORDER BY CASE $order_by
            WHEN 'submitted_file_id' THEN sf.submitted_file_id
            WHEN 'ccdi_arm' THEN sf.ccdi_arm
            WHEN 'submission_date' THEN sf.submission_date
            WHEN 'submission_ts' THEN sf.submission_ts
            WHEN 'source_ip' THEN sf.source_ip
            WHEN 'file_count_validate' THEN sf.file_count_validate
            WHEN 'filename_list_validate' THEN sf.filename_list_validate
            WHEN 'study_registered' THEN sf.study_registered
            WHEN 'primary_datatype' THEN sf.primary_datatype
            WHEN 'derived_interventional_clinical_trial' THEN sf.derived_interventional_clinical_trial
            WHEN 'derived_observational_study' THEN sf.derived_observational_study
            WHEN 'have_subject_ids' THEN sf.have_subject_ids
            WHEN 'have_pii' THEN sf.have_pii
            WHEN 'subject_id_cross_reference' THEN sf.subject_id_cross_reference
            WHEN 'contain_biospecimen_ids' THEN sf.contain_biospecimen_ids
            WHEN 'contain_biospecimen_2_subject_mappings' THEN sf.contain_biospecimen_2_subject_mappings
            WHEN 'participant_id_column_header_or_number' THEN sf.participant_id_column_header_or_number
            WHEN 'alt_participant_id_column_header_or_number' THEN sf.alt_participant_id_column_header_or_number
            ELSE sf.submitted_file_id END
    """, passThrough: true)

    fileOverViewPagedDesc(submitted_file_ids: [String] = [""], order_by: String = ""): [SubmittedFileOverview] @cypher(statement: """
        MATCH (sf:submitted_file)
          WHERE ($submitted_file_ids IS NULL OR $submitted_file_ids = [""] OR sf.submitted_file_id IN $submitted_file_ids)
        OPTIONAL MATCH (sf)<--(fs:file_set)
        WITH
            collect(DISTINCT fs {.*}) AS files, sf
        RETURN {
            submitted_file_id: sf.submitted_file_id,
            ccdi_arm: sf.ccdi_arm,
            submission_date: sf.submission_date,
            submission_ts: sf.submission_ts,
            source_ip: sf.source_ip,
            file_count_validate: sf.file_count_validate,
            filename_list_validate: sf.filename_list_validate,
            study_registered: sf.study_registered,
            primary_datatype: sf.primary_datatype,
            derived_interventional_clinical_trial: sf.derived_interventional_clinical_trial,
            derived_observational_study: sf.derived_observational_study,
            have_subject_ids: sf.have_subject_ids,
            have_pii: sf.have_pii,
            subject_id_cross_reference: sf.subject_id_cross_reference,
            contain_biospecimen_ids: sf.contain_biospecimen_ids,
            contain_biospecimen_2_subject_mappings: sf.contain_biospecimen_2_subject_mappings,
            participant_id_column_header_or_number: sf.participant_id_column_header_or_number,
            alt_participant_id_column_header_or_number: sf.alt_participant_id_column_header_or_number,
            files: files
        }
        ORDER BY CASE $order_by
            WHEN 'submitted_file_id' THEN sf.submitted_file_id
            WHEN 'ccdi_arm' THEN sf.ccdi_arm
            WHEN 'submission_date' THEN sf.submission_date
            WHEN 'submission_ts' THEN sf.submission_ts
            WHEN 'source_ip' THEN sf.source_ip
            WHEN 'file_count_validate' THEN sf.file_count_validate
            WHEN 'filename_list_validate' THEN sf.filename_list_validate
            WHEN 'study_registered' THEN sf.study_registered
            WHEN 'primary_datatype' THEN sf.primary_datatype
            WHEN 'derived_interventional_clinical_trial' THEN sf.derived_interventional_clinical_trial
            WHEN 'derived_observational_study' THEN sf.derived_observational_study
            WHEN 'have_subject_ids' THEN sf.have_subject_ids
            WHEN 'have_pii' THEN sf.have_pii
            WHEN 'subject_id_cross_reference' THEN sf.subject_id_cross_reference
            WHEN 'contain_biospecimen_ids' THEN sf.contain_biospecimen_ids
            WHEN 'contain_biospecimen_2_subject_mappings' THEN sf.contain_biospecimen_2_subject_mappings
            WHEN 'participant_id_column_header_or_number' THEN sf.participant_id_column_header_or_number
            WHEN 'alt_participant_id_column_header_or_number' THEN sf.alt_participant_id_column_header_or_number
            ELSE sf.submitted_file_id END DESC
    """, passThrough: true)

    participantOverViewPaged(participant_ids: [String] = [""], order_by: String = ""): [ParticipantOverview] @cypher(statement: """
        MATCH (p:participant)
          WHERE ($participant_ids IS NULL OR $participant_ids = [""] OR p.participant_id IN $participant_ids)
        OPTIONAL MATCH (p)<--(ap:alt_participant)
        WITH
            collect(DISTINCT ap {.*}) AS alt_participants, p
        RETURN {
            participant_id: p.participant_id,
            gender: p.gender,
            age_at_index: p.age_at_index,
            alt_participants: alt_participants
        }
        ORDER BY CASE $order_by
            WHEN 'participant_id' THEN p.participant_id
            WHEN 'gender' THEN p.gender
            WHEN 'age_at_index' THEN p.age_at_index
            ELSE p.participant_id END
    """, passThrough: true)

    participantOverViewPagedDesc(submitted_file_ids: [String] = [""], order_by: String = ""): [ParticipantOverview] @cypher(statement: """
        MATCH (p:participant)
          WHERE ($participant_ids IS NULL OR $participant_ids = [""] OR p.participant_id IN $participant_ids)
        OPTIONAL MATCH (p)<--(ap:alt_participant)
        WITH
            collect(DISTINCT ap {.*}) AS alt_participants, p
        RETURN {
            participant_id: p.participant_id,
            gender: p.gender,
            age_at_index: p.age_at_index,
            alt_participants: alt_participants
        }
        ORDER BY CASE $order_by
            WHEN 'participant_id' THEN p.participant_id
            WHEN 'gender' THEN p.gender
            WHEN 'age_at_index' THEN p.age_at_index
            ELSE p.participant_id END DESC
    """, passThrough: true)

    "Facet search counts"
    filterFileCountByProgram(
        programs: [String] = [],
        file_content_formats: [String] = []
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (s:submitter)<--(sf:submitted_file)<--(fs:file_set)
          WHERE (size($programs) = 0 OR s.program_id IN $programs)
            AND (size($file_content_formats) = 0 OR fs.file_content_format IN $file_content_formats)
        WITH DISTINCT sf, s
        RETURN {group: s.program_id , subjects: count(sf)}
    """, passThrough: true)

    filterFileCountByContentFormat(
        programs: [String] = [],
        file_content_formats: [String] = []
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (s:submitter)<--(sf:submitted_file)<--(fs:file_set)
          WHERE (size($programs) = 0 OR s.program_id IN $programs)
            AND (size($file_content_formats) = 0 OR fs.file_content_format IN $file_content_formats)
        WITH DISTINCT sf, fs
        RETURN {group: fs.file_content_format , subjects: COUNT(DISTINCT sf.submitted_file_id)}
    """, passThrough: true)

    searchFiles (
          programs: [String] = [],
          file_content_formats: [String] = [],
          first: Int = 100
    ): SearchResult @cypher(statement: """
        // Filtering subjects
        MATCH (s:submitter)<--(sf:submitted_file)<--(fs:file_set)
          WHERE (size($programs) = 0 OR s.program_id IN $programs)
            AND (size($file_content_formats) = 0 OR fs.file_content_format IN $file_content_formats)
        MATCH (sf)<--(p:participant)
        MATCH (sf)<--(st:study)
        WITH DISTINCT sf, fs, s, p, st
        RETURN  {
            fileIds: COLLECT(DISTINCT sf.submitted_file_id),
            numberOfSubmitters: COUNT(DISTINCT s.submitter_id),
            numberOfPrograms: COUNT(DISTINCT s.program_id),
            numberOfStudies: COUNT(DISTINCT st.study_id),
            numberOfParticipants: COUNT(DISTINCT p.participant_id),
            numberOfFiles: COUNT(DISTINCT sf.submitted_file_id),
            firstPage: COLLECT( DISTINCT({
                        submitted_file_id: sf.submitted_file_id,
                        ccdi_arm: sf.ccdi_arm,
                        submission_date: sf.submission_date,
                        submission_ts: sf.submission_ts,
                        source_ip: sf.source_ip,
                        file_count_validate: sf.file_count_validate,
                        filename_list_validate: sf.filename_list_validate,
                        study_registered: sf.study_registered,
                        primary_datatype: sf.primary_datatype,
                        derived_interventional_clinical_trial: sf.derived_interventional_clinical_trial,
                        derived_observational_study: sf.derived_observational_study,
                        have_subject_ids: sf.have_subject_ids,
                        have_pii: sf.have_pii,
                        subject_id_cross_reference: sf.subject_id_cross_reference,
                        contain_biospecimen_ids: sf.contain_biospecimen_ids,
                        contain_biospecimen_2_subject_mappings: sf.contain_biospecimen_2_subject_mappings,
                        participant_id_column_header_or_number: sf.participant_id_column_header_or_number,
                        alt_participant_id_column_header_or_number: sf.alt_participant_id_column_header_or_number
                      }))[0..$first]
        }
    """, passThrough:true)

    programDetail(program_id: String): ProgramDetail @cypher(statement:  """
        MATCH (s:submitter {program_id: $program_id})
        MATCH (s)<--(sf:submitted_file)
        OPTIONAL MATCH (sf)<--(p:participant)
        OPTIONAL MATCH (sf)<--(st:study)
        WITH s, sf, p, st
        RETURN {
            program_id: s.program_id,
            start_date: "2006-04-07",
            end_date: "2018-03-18",
            num_files: COUNT(DISTINCT sf.submitted_file_id),
            num_participants: COUNT(DISTINCT p.participant_id),
            num_studies: COUNT(DISTINCT st.study_id),
            files: collect(DISTINCT sf {.*})
        }
    """, passThrough: true)

    fileDetail(submitted_file_id: String): SubmittedFileDetail @cypher(statement:  """
        MATCH (sf:submitted_file {submitted_file_id: $submitted_file_id})
        MATCH (sf)<--(p:participant)<--(ap:alt_participant)
        MATCH (s:submitter)<--(sf)<--(fs:file_set)
        MATCH (sf)<--(st:study)
        WITH sf, p, s, st, collect(DISTINCT fs {.*}) AS files, COLLECT(DISTINCT(ap.alt_participant_id)) AS alt_participant_ids
        RETURN {
            submitted_file_id: sf.submitted_file_id,
            submitter_id: s.submitter_id,
            submitter_name: s.submitter_name,
            ccdi_arm: sf.ccdi_arm,
            submission_date: sf.submission_date,
            submission_ts: sf.submission_ts,
            source_ip: sf.source_ip,
            file_count_validate: sf.file_count_validate,
            filename_list_validate: sf.filename_list_validate,
            species: sf.species,
            human_subjects: sf.human_subjects,
            total_size_in_bytes: sf.total_size_in_bytes,
            primary_datatype: sf.primary_datatype,
            have_subject_ids: sf.have_subject_ids,
            have_pii: sf.have_pii,
            subject_id_cross_reference: sf.subject_id_cross_reference,
            contain_biospecimen_ids: sf.contain_biospecimen_ids,
            contain_biospecimen_2_subject_mappings: sf.contain_biospecimen_2_subject_mappings,
            participant_id_column_header_or_number: sf.participant_id_column_header_or_number,
            alt_participant_id_column_header_or_number: sf.alt_participant_id_column_header_or_number,
            files: files,
            participants: COLLECT( DISTINCT({
                        participant_id: p.participant_id,
                        gender: p.gender,
                        age_at_index: p.age_at_index,
                        alt_participants: apoc.text.join(alt_participant_ids, ',')
                      })),
            studies: COLLECT(DISTINCT st {.*})
        }
    """, passThrough: true)

    filesInList(file_ids: [String], order_by: String = ""): [File_Set_Info] @cypher(statement: """
        MATCH (f:file_set)
        WHERE f.file_set_id in $file_ids
        WITH f
        RETURN {
            file_set_id: f.file_set_id,
            file_ordinal: f.file_ordinal,
            file_id: f.file_id,
            file_name: f.file_name,
            file_md5: f.file_md5,
            file_content_format: f.file_content_format,
            file_deposit_location: f.file_deposit_location
        }
        ORDER BY CASE $order_by
            WHEN 'file_set_id' THEN f.file_set_id
            WHEN 'file_ordinal' THEN f.file_ordinal
            WHEN 'file_id' THEN f.file_id
            WHEN 'file_name' THEN f.file_name
            WHEN 'file_md5' THEN f.file_md5
            WHEN 'file_content_format' THEN f.file_content_format
            WHEN 'file_deposit_location' THEN f.file_deposit_location
            ELSE f.file_set_id END
    """, passThrough: true)

    filesInListDesc(file_ids: [String], order_by: String = ""): [File_Set_Info] @cypher(statement: """
        MATCH (f:file_set)
        WHERE f.file_set_id in $file_ids
        WITH f
        RETURN {
            file_set_id: f.file_set_id,
            file_ordinal: f.file_ordinal,
            file_id: f.file_id,
            file_name: f.file_name,
            file_md5: f.file_md5,
            file_content_format: f.file_content_format,
            file_deposit_location: f.file_deposit_location
        }
        ORDER BY CASE $order_by
            WHEN 'file_set_id' THEN f.file_set_id
            WHEN 'file_ordinal' THEN f.file_ordinal
            WHEN 'file_id' THEN f.file_id
            WHEN 'file_name' THEN f.file_name
            WHEN 'file_md5' THEN f.file_md5
            WHEN 'file_content_format' THEN f.file_content_format
            WHEN 'file_deposit_location' THEN f.file_deposit_location
            ELSE f.file_set_id END DESC
    """, passThrough: true)

}
